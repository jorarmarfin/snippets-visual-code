{
    /*Laravel*/
    /*Migracion*/
    "Migrate string": {
        "prefix": "lvl:mig:string",
        "body": [
            "\\$table->string('${1:nombre}')->nullable();"
        ],
        "description": "Campo string para migracion en laravel"
    },
    "Migrate create_table": {
        "prefix": "lvl:mig:create-table",
        "body": [
            "Schema::create('${1:nombre}', function (Blueprint \\$table) {",
            "\t\\$table->string('field',255)->nullable();",
            "});",
            "Schema::dropIfExists('${1:nombre}'); //Down"
        ],
        "description": "Campo string para migracion en laravel"
    },
    "Migrate create_field": {
        "prefix": "lvl:mig:add-column",
        "body": [
            "Schema::table('${1:tabla}', function (Blueprint \\$table) {",
            "\t\\$table->string('${2:field}',255)->nullable();",
            "});",
            "Schema::table('${1:tabla}', function (Blueprint \\$table) {",
            "\t\\$table->dropColumn(['${2:field}']);",
            "});"
        ],
        "description": "Campo string para migracion en laravel"
    },
    /*Model*/
    "Table init": {
        "prefix": "lvl:model:init",
        "body": [
            "protected \\$table = '${1:nombre_tabla}';",
            "protected \\$guarded = [];",
            "public \\$timestamps = false;"
        ],
        "description": "Campo string para migracion en laravel"
    },
    "Table primary key": {
        "prefix": "lvl:model:primarykey",
        "body": [
            "protected \\$primaryKey = '${1:Field}';"
        ],
        "description": "Definir llave primaria para la tabla"
    },
    "Table primary accessor": {
        "prefix": "lvl:model:accessor",
        "body": [
            "public function get${1:NombreAccessor}Attribute(${2:value})",
            "{",
            "\treturn ucfirst(${2:value});",
            "}",
        ],
        "description": "Definir un accessor de un campo"
    },
    "Table primary mutator": {
        "prefix": "lvl:model:mutator",
        "body": [
            "public function set${1:NombreMutator}Attribute(\\$value)",
            "{",
            "\t\\$this->attributes['${2:Field}'] = strtolower(\\$value);",
            "}",
        ],
        "description": "Definir un mutator de un campo"
    },
    "scope": {
        "prefix": "lvl:model:scope",
        "body": [
            "/**",
            "* Scope a query to only include popular users.",
            "*",
            "* @param  \\Illuminate\\Database\\Eloquent\\Builder  $query",
            "* @return \\Illuminate\\Database\\Eloquent\\Builder",
            "*/",
            "public function scope${1:Nombre}(\\$query)",
            "{",
            "\treturn \\$query->where('votes', '>', 100);",
            "}"
        ]

    },
    // Controler
    "lvdd": {
        "prefix": "lvl:dd",
        "body": [
            "dd('${1:String}');"
        ],
        "description": "Registra informacion en el log de Laravel"

    },
    "lvlog": {
        "prefix": "lvl:log",
        "body": [
            "\\Log::info('info:'.json_encode(\\$odooProduct)); exit;"
        ],
        "description": "Registra informacion en el log de Laravel"

    },
    "Helper":{
        "prefix": "lvl:helper",
        "body": [
            "namespace App\\Helpers;\n",
            "class ${1:nombre_del_archivo} " ,
            "{\n",
            "\tpublic static function ${2:Metodo}()",
            "\t{ \n",
            "\t return 0;",
            "\t}",
            "}"
        ],
        "description": "Crea la clase base para hacer un helper en Laravel"
    },
    // Return Respons
    "Retorno":{
        "prefix": "lvl:return:json",
        "body": "return response()->json(\\$crm)->withHeaders(\\$this->api_rest_headers);",
        "description": "retorna campo json"
    },
    //Emails
    "Email": {
        "prefix": "lvl:email",
        "body": "Mail::to('email@b.com')->cc(['a@b.com','a@b.com'])->send(new ${1:mailer}());",
        "description": "como enviar un email"

    },
    "EmailBuild":{
        "prefix": "lvl:email:build",
        "body": [
            "return \\$this->from('example@example.com')",
            "->view('emails.orders.shipped');"
        ],
        "description": "Codigo base para enviar un email"
    },
    // Comandos
    "Comando":{
        "prefix": "lvl:command",
        "body": "'${1:comando}:${2:comando} {--${3:variable}=?}';",
        "description": "Ejemplo de comando"
    },
    "ComandoArgument":{
        "prefix": "lvl:command:argument",
        "body": "\\$this->argument('${1:argumento}');",
        "description": "Leer un argumento del comando"
    },
    "ComandoOptions":{
        "prefix": "lvl:command:option",
        "body": "\\$this->option('${1:opcion}');",
        "description": "Leer una opcion del comando"
    },
    "ComandoWritingOutput":{
        "prefix": "lvl:command:writing-output",
        "body": "\\$this->${2:info}('${1:Mensaje}');",
        "description": "Escribir resultado los tipos son info, error, line"
    },
    /*Drupal*/
    "Entity": {
        "prefix": "drupal:orm:entity",
        "body": [
            "use Drupal\\node\\Entity\\Node;\n\n",
            "\\$entity = \\Drupal::entityQuery('node');",
            "\\$entity->condition('type', 'boletas');",
            "\\$entity->condition('field_pe_estado', 'Pendiente', '=');",
            "\\$entity->sort('field_dependencia.entity.weight', 'ASC');",
            "\\$entity->sort('field_cargo.entity.weight', 'ASC');",
            "\\$nids = \\$entity->execute();",
            "\\$nodes = Node::loadMultiple(\\$nids);"
        ],
        "description": "Codigo para hacer una consulta a un nodo"
    },
    "EntitySelect": {
        "prefix": "drupal:orm:select",
        "body": [
            "\\$query = db_select('${1:commerce_order}', 'co');",
            "\\$query->fields('co',array('order_id','type','total_price__number','state'));",
            "\\$query->join('commerce_order_item','coi','co.order_id = coi.order_id');",
            "\\$query->addField('coi','quantity');",
            "\\$query->condition('co.state','validation','=');",
            "\\$query->range(0,2);",
            "\\$data =  \\$query->execute()->fetchAll();"
        ],
        "description": "Select de una entidad de un modo"
    },
    "dblog": {
        "prefix": "drupal:log",
        "body": [
            "\\Drupal::logger('${1:tipo}')->notice('${2:mensaje}');",
        ],
        "description": "fragmento de cÃ³digo de log"
    },
    "EntityCreate": {
        "prefix": "drupal:orm:create",
        "body": [
            "use Drupal\\node\\Entity\\Node;\n\n",
            "\\$node = Node::create( [",
            "'type'=>'miembro',",
            "'title' => 'nodo 24',",
            "'body' => 'nodo 24',",
            "]);",
            "\\$node->save();",
        ],
        "description": "Create de una entidad de un modo"
    },
    /*October*/
    "octo_file attachments": {
        "prefix": "october:file:attach",
        "body": [
            "public \\$attachOne = [",
            "\t'${1:foto}' => 'System\\Models\\File'",
            "];"
        ],
        "description": "Attach file october"
    },
    "octo_model_accessors": {
        "prefix": "october:model:accessors",
        "body": [
            "public function get${1:FirstName}Attribute(\\$value)",
            "{",
            "\treturn ucfirst(\\$value);",
            "}"
        ],
        "description": "Attach file october"
    },
    "octo_model_mutators": {
        "prefix": "october:model:mutators",
        "body": [
            "public function set${1:FirstName}Attribute(\\$value)",
            "{",
            "\t\\$this->attributes['${1:FirstName}'] = strtolower(\\$value);",
            "}"
        ],
        "description": "Attach file october"
    },
    "octo_model_relation_one_to_many": {
        "prefix": "october:relation:one_to_many",
        "body": [
            "/**  ",
            "* Relations inverse One To Many ",
            "*/",
            "public \\$belongsTo = [",
            "\t'${1:user}' => 'Rainlab\\User\\Models\\User'",
            "];"
        ],
        "description": "Relation one_to_many"
    },
    "octo_model_scope": {
        "prefix": "october:model:scope",
        "body": [
            "/**  ",
            "* Scope a query to only include popular users. ",
            "*/",
            "public function scope${1:NameScope}(\\$query){",
            "\t return \\$query->where('votes', '>', 100);",
            "}"
        ],
        "description": "Relation one_to_many"
    },
    "octo_model_json": {
        "prefix": "october:model:json",
        "body": [
            "protected \\$jsonable = ['${1:Field}'];",
        ],
        "description": "Field Json to october"
    },
    "octo_plugin_settings": {
        "prefix": "october:plugin:settings",
        "body": [
            "public function registerSettings()",
            "{",
            "\t return [",
            "\t\t'config' => [",
            "\t\t'label'       => 'luismayta.youtube::lang.plugin.name',",
            "\t\t'description' => 'luismayta.youtube::lang.plugin.description',",
            "\t\t'icon'        => 'icon-youtube-play',",
            "\t\t'class'       => 'LuisMayta\\Youtube\\Models\\Settings',",
            "\t\t'order'       => 600",
            "\t\t]",
            "\t ];",
            "}"
        ],
        "description": "Plugins settings"
    },
    "octo_components_settings": {
        "prefix": "october:component:init",
        "body": [
            "<?php namespace LuisMayta\\Coordinacion\\Components;",
            "use Cms\\Classes\\ComponentBase;",
            "class ${1:NombreClase} extends ComponentBase",
            "{",
            "\t public function componentDetails()",
            "\t{",
            "\t\treturn [",
            "\t\t\t'name' => 'luismayta.coordinacion::lang.panel_admin.de_name',",
            "\t\t\t'description' => 'luismayta.coordinacion::lang.panel_admin.de_desc'",
            "\t\t];",
            "\t}",
            "}"
        ],
        "description": "Component init"
    },
    "octo_components_properties": {
        "prefix": "october:component:defineproperties",
        "body": [
            "public function defineProperties()",
            "{",
            "\treturn [",
            "\t\t'maxItems' => [",
            "\t\t\t'title'             => 'Max items',",
            "\t\t\t'description'       => 'The most amount of todo items allowed',",
            "\t\t\t'default'           => 10,",
            "\t\t\t'type'              => 'string',",
            "\t\t\t'validationPattern' => '^[0-9]+\\$',",
            "\t\t\t'validationMessage' => 'The Max Items property can contain only numeric symbols'",
            "\t\t]",
            "\t];",
            "}"
        ],
        "description": "Component define properties"
    },
    "octo_components_onrun": {
        "prefix": "october:component:onRun",
        "body": [
            "public function onRun()",
            "{",
            "\t\\$this->page['var'] = 'value'; // Inject some variable to the page",
            "}"
        ],
        "description": "Component method onrun"
    },
    "octo_components_oninit": {
        "prefix": "october:component:onInit",
        "body": [
            "public function onInit()",
            "{",
            "\t\\$this->page['var'] = 'value'; // Inject some variable to the page",
            "}"
        ],
        "description": "Component method onInit"
    },
    "octo_components_onBeforePageStart": {
        "prefix": "october:component:onBeforePageStart",
        "body": [
            "public function onBeforePageStart()",
            "{",
            "\t\\$this->page['var'] = 'value'; // Inject some variable to the page",
            "}"
        ],
        "description": "Component method onBeforePageStart"
    },
    "octo_components_onStart": {
        "prefix": "october:component:onStart",
        "body": [
            "public function onStart()",
            "{",
            "\t\\$this->page['var'] = 'value'; // Inject some variable to the page",
            "}"
        ],
        "description": "Component method onStart"
    },
    "octo_components_onEnd": {
        "prefix": "october:component:onEnd",
        "body": [
            "public function onEnd()",
            "{",
            "\t\\$this->page['var'] = 'value'; // Inject some variable to the page",
            "}"
        ],
        "description": "Component method onEnd"
    },
    // TCPDF
    "pdf_cell": {
        "prefix": "tcpdf:cell",
        "body": [
            "PDF::SetXY(5,10);",
            "PDF::Cell(200,5,'DECLARACIÃN JURADA',1,0,'C');"
        ],
        "description": "cell de tcpdf"
    },
    "pdf_img": {
        "prefix": "tcpdf:img",
        "body": [
            "PDF::Image(asset('assets/pages/img/ficha.png'),0,0,210,297,'', '', '', false, 300, '', false, false, 0);",
        ],
        "description": "img de tcpdf"
    },
    "pdf_MultiCell": {
        "prefix": "tcpdf:MultiCell",
        "body": [
            "\\$texto='';",
            "PDF::MultiCell(155,5,\\$texto,1,'J',false);",
        ],
        "description": "MultiCell de tcpdf"
    },
    "pdf_xy": {
        "prefix": "tcpdf:xy",
        "body": [
            "PDF::SetXY(${1:x},${2:y});",
        ],
        "description": "XY de tcpdf"
    },
    "pdf_SetFont": {
        "prefix": "tcpdf:SetFont",
        "body": [
            "PDF::SetFont('helvetica','B',20);",
        ],
        "description": "SetFont de tcpdf"
    },
    //Carbon
    "createFromFormat": {
        "prefix": "carbon:cff",
        "body": [
            "Carbon::createFromFormat('Y-m-d H', '1975-05-21 22')->toDateTimeString()",
        ],
        "description": "CreateFromFormat"
    },
    "new_carbon": {
        "prefix": "carbon:init",
        "body": [
            "\\$dt = new Carbon(\\$fecha);",
            "\\$dt->format('d');",
        ],
        "description": "new Carbon"
    },
    "new_carbon_now": {
        "prefix": "carbon:now",
        "body": [
            "\\$dt = new Carbon();",
            "\\$dt->toDateString();",
        ],
        "description": "now Carbon"
    },
    /* Wordpress */
    "wp_ftp": {
        "prefix": "wp:ftp",
        "body": [
            "/* Desactivar el uso de FTP para actualizar Plugins y Themes en WordPress */",
            "define('FS_METHOD','direct');",
        ],
        "description": "Deshabilita el ftp del wordpress"
    }




}